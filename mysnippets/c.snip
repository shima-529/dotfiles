snippet     if
abbr        if () {}
    if(${1:#:condition}) {
        ${0:TARGET}
    }

snippet else
    else{
        ${0:TARGET}
    }

snippet elif
    else if(${1:#:condition}) {
        ${0:TARGET}
    }

snippet     ifelse
abbr        if () {} else {}
    if(${1:#:condition}) {
        ${2:TARGET}
    }else{
        ${3}
    }

snippet     for
alias       f
abbr        for () {}
    for(${6:int} ${1:i} = ${2:0}; $1 ${3:<} ${4}; $1${5:++}) {
        ${0:#:TARGET}
    }

snippet     while
alias       w
abbr        while() {}
    while(${1:condition}) {
        ${0:TARGET}
    }

snippet     whileinf
alias       winf
abbr        while () {}
    while(1) {
        ${0:TARGET}
    }

snippet     forinf
alias       finf
abbr        for () {}
    for(;;) {
        ${0:TARGET}
    }


snippet     do_while
alias       do
    do {
        ${0:TARGET:code}
    } while(${1:#:condition});

snippet     function
alias       func
abbr        func() {}
    ${1:void} ${2:#:func_name}(${3:#:args}) {
        ${0:TARGET}
    }

snippet     struct
abbr        struct {}
    struct ${1:#:name} {
        ${0:TARGET:data}
    };

# Typedef struct
snippet struct_typedef
alias   defstr
    typedef struct ${1:#:name} {
        ${0:TARGET:data}
    };

snippet     enum
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main
	int main(int argc, char *argv[]) {
		${0:TARGET}
		return 0;
	}

snippet vmain
alias vm
	int main(void) {
		${0:TARGET}
		return 0;
	}

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:stdio}.h>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2, incc
    #include "${1}.h"${0}

snippet ifndef
alias   #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

snippet def
alias   #def, #define
    #define 

# Ternary conditional operator
snippet conditional
alias   cond
    (${1:#:condition}) ? ${2:#:a} : ${3:#:b}

snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet sizeof
alias size
    sizeof(${0:TARGET})

snippet fgets
abbr fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:FILE});
