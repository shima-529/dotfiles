" neobundleの呼び出し、環境設定 {{{
if has('vim_starting')
	set nocompatible
	" neobundle をインストールしていない場合は自動インストール
	if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
		echo "install neobundle..."
		" vim からコマンド呼び出しているだけ neobundle.vim のクローン
		:call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
	endif
	" runtimepath の追加は必須
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
" }}}
call neobundle#begin(expand('~/.vim/bundle'))
let g:neobundle_default_git_protocol='https'
NeoBundleFetch 'Shougo/neobundle.vim'
" ===========================================
NeoBundle 'Townk/vim-autoclose'
NeoBundle 'kana/vim-smartinput'
" vim-quickrun {{{
NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
			\ 'runner'    : 'vimproc',
			\ 'runner/vimproc/updatetime' : 60,
			\ 'outputter' : 'error',
			\ 'outputter/error/success' : 'buffer',
			\ 'outputter/error/error'   : 'quickfix',
			\ 'outputter/buffer/split'  : ':botright 8sp',
			\ 'outputter/buffer/close_on_empty' : 1,
			\ }
" }}}
" vim-easy-align {{{
NeoBundleLazy 'junegunn/vim-easy-align', {
			\ 'autoload': {
			\   'commands' : ['EasyAlign'],
			\   'mappings' : ['<Plug>(EasyAlign)'],
			\ }}
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
" }}}
" Color Schemes {{{
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'croaker/mustang-vim'
NeoBundle 'jeffreyiacono/vim-colors-wombat'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'vim-scripts/Lucius'
NeoBundle 'vim-scripts/Zenburn'
NeoBundle 'mrkn/mrkn256.vim'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'therubymug/vim-pyte'
NeoBundle 'tomasr/molokai'
" }}}
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tomtom/tcomment_vim'
let g:tcommentMapLeader1 = '<C-_>'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
let g:neosnippet#data_directory=expand('~/.cache/neosnippet')
let g:neosnippet#snippets_directory='~/.vim/bundle/mysnippets/'
imap <c-k>     <plug>(neosnippet_expand_or_jump)
smap <c-k>     <plug>(neosnippet_expand_or_jump)
xmap <c-k>     <plug>(neosnippet_expand_target)
" Syntastic {{{
NeoBundle 'scrooloose/syntastic.git'
set statusline+=%#warningmsg#
set statusline+=%{syntasticstatuslineflag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" }}}
" " Neocomplete {{{
" NeoBundle 'Shougo/neocomplete.vim'
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_ignore_case = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#enable_auto_select = 1
" let g:neocomplete#enable_enable_camel_case_completion = 0
" if !exists('g:neocomplete#keyword_patterns')
" 	let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns._ = '\h\w*'
" " <c-k>で展開
" imap <c-k> <plug>(neosnippet_expand_or_jump)
" smap <c-k> <plug>(neosnippet_expand_or_jump)
" " <tab>: completion.
" inoremap <expr><tab>  pumvisible() ? '<c-n>' : '<tab>'
" " " <bs> でポップアップを閉じて文字を削除
" " imap <expr> <bs>
" " 			\ neocomplete#smart_close_popup() . '<plug>(smartinput_bs)'
" " " <c-h> でポップアップを閉じる
" " imap <expr> <c-h>
" " 			\ neocomplete#cancel_popup()
" " " <cr> で候補を選択し改行する
" " " ポップアップがないときには改行する
" " " imap <expr> <cr> pumvisible() ?
" " "       \ neocomplete#close_popup() : '\<plug>(smartinput_cr)'
" " imap <expr> <cr> pumvisible() ?
" " 			\ '<c-n><c-p><c-y><c-k>' : '<plug>(smartinput_cr)'
" }}}
NeoBundle 'haya14busa/incsearch.vim'
NeoBundleLazy 'hail2u/vim-css3-syntax', {
			\ 'autoload' : {'filetypes' : ['css']}
			\ }
" NeoBundle 'alpaca-tc/alpaca_powertabline'
" NeoBundle 'lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
NeoBundle 'lokaltog/powerline-fontpatcher'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundleLazy 'mattn/emmet-vim', {
			\ 'autoload' : {'filetypes' : ['html', 'htm', 'php']}
			\ }
" lightline {{{
NeoBundle 'itchyny/Lightline.vim'
let g:lightline = {
			\ 'mode_map': {'c': 'normal'},
			\ 'active': {
			\   'left': [
			\     ['mode', 'paste'],
			\	  ['readonly', 'filename', 'modified'],
			\   ],
			\   'right': [
			\     ['lineinfo', 'syntastic'],
			\     ['percent'],
			\     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
			\   ],
			\ },
			\ 'component': {
			\ },
			\ 'component_expand': {
			\   'syntastic': 'syntasticstatuslineflag'
			\ },
			\ 'component_type': {
			\   'syntastic': 'error'
			\ },
			\ 'separator': {'left': '⮀', 'right': '⮂'},
			\ 'subseparator': {'left': '⮁', 'right': '⮃'}
			\ }
let g:syntastic_mode_map = { 'mode': 'passive' }
augroup autosyntastic
	autocmd!
	autocmd bufwritepost *.c,*.cpp call s:syntastic()
augroup end
function! s:syntastic()
	syntasticcheck
	call lightline#update()
endfunction
" }}}
" vim-easymotion {{{
NeoBundle 'Lokaltog/vim-easymotion'
" lokaltog/vim-easymotion
" http://blog.remora.cx/2012/08/vim-easymotion.html
" ホームポジションに近いキーを使う
let g:easymotion_keys='hjklasdfgyuiopqwertnmzxcvbhjklasdfgyuiopqwertnmzxcvb'
" 「;」 + 何かにマッピング
let g:easymotion_leader_key=';'
" 1 ストローク選択を優先する
let g:easymotion_grouping=1
" カラー設定変更
hi easymotiontarget ctermbg=none ctermfg=red
hi easymotionshade  ctermbg=none ctermfg=blue
" }}}
NeoBundle 'rhysd/clever-f.vim'
NeoBundle 'itchyny/dictionary.vim'
NeoBundle 'Shougo/vimproc.vim'
" vim-brightest {{{
" NeoBundle 'osyo-manga/vim-brightest'
" let g:brightest#highlight = {
" \   'group' : 'brightestreverse'
" \}
" let g:brightest#pattern = '\k\+'
" autocmd bufread * :brightestdisable
" command! b brightesttoggle
" }}}
NeoBundleLazy 'mopp/layoutplugin.vim', {
			\ 'autoload' : { 'commands' : 'layoutplugin'}
			\ }
NeoBundleLazy 'shima-529/c-prototype.vim', {
			\ 'autoload' : {'filetypes' : ['c', 'cpp']}
			\ }
" NeoBundle 'YankRing.vim'
" NeoBundle 'mbbill/undotree'
NeoBundle 'mopp/next-alter.vim'
nnoremap <Leader>a :OpenNAlter<CR>
NeoBundle 'kana/vim-smartword'
nmap w   <Plug>(smartword-w)
nmap b   <Plug>(smartword-b)
nmap e   <Plug>(smartword-e)
NeoBundle 'Yggdroot/indentLine'
let g:indentLine_faster = 1
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/context_filetype.vim'
NeoBundle "osyo-manga/vim-precious"
nnoremap <leader>e :VimFilerExplore -split -winwidth=30 -find -no-quit<Cr>
" RainbowParentheses {{{
NeoBundle 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
			\ ['brown',       'RoyalBlue3'],
			\ ['Darkblue',    'SeaGreen3'],
			\ ['darkgray',    'DarkOrchid3'],
			\ ['darkgreen',   'firebrick3'],
			\ ['darkcyan',    'RoyalBlue3'],
			\ ['darkred',     'SeaGreen3'],
			\ ['darkmagenta', 'DarkOrchid3'],
			\ ['brown',       'firebrick3'],
			\ ['gray',        'RoyalBlue3'],
			\ ['black',       'SeaGreen3'],
			\ ['darkmagenta', 'DarkOrchid3'],
			\ ['Darkblue',    'firebrick3'],
			\ ['darkgreen',   'RoyalBlue3'],
			\ ['darkcyan',    'SeaGreen3'],
			\ ['darkred',     'DarkOrchid3'],
			\ ['red',         'firebrick3'],
			\ ]
let g:rbpt_max = 16
" }}}
NeoBundle 'sh.vim'
" NeoBundle 'leftouterjoin/changed'
" ===========================================
NeoBundleCheck
call neobundle#end()
filetype plugin indent on
" SmartInput Functions {{{
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
			\   'at'    : '(\%#)',
			\   'char'  : '<Space>',
			\   'input' : '<Space><Space><Left>',
			\   })
call smartinput#define_rule({
			\   'at'    : '( \%# )',
			\   'char'  : '<BS>',
			\   'input' : '<Del><BS>',
			\   })
call smartinput#map_to_trigger('i', '<Plug>(smartinput_CR)',
			\                        '<Enter>',
			\                        '<Enter>')
" }}}
colorscheme solarized
